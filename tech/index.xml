<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Teches on depository</title>
    <link>https://ymotongpoo.github.io/tech/index.xml</link>
    <description>Recent content in Teches on depository</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Wed, 15 Feb 2017 13:31:22 +0900</lastBuildDate>
    <atom:link href="https://ymotongpoo.github.io/tech/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>coursera note</title>
      <link>https://ymotongpoo.github.io/tech/2017/02/15/coursera-note/</link>
      <pubDate>Wed, 15 Feb 2017 13:31:22 +0900</pubDate>
      
      <guid>https://ymotongpoo.github.io/tech/2017/02/15/coursera-note/</guid>
      <description>

&lt;h2 id=&#34;week-2&#34;&gt;Week 2&lt;/h2&gt;

&lt;h3 id=&#34;maultivarlate-linear-regression&#34;&gt;Maultivarlate Linear Regression&lt;/h3&gt;

&lt;p&gt;多変量線形回帰問題を考える場合は、変数をベクトルで考えてあげると良い。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;h(x) = theta^T x
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;と書ける。このとき &lt;code&gt;x0=1&lt;/code&gt; とする。内積でかけて嬉しいね。
また偏微分も基本的には全部相似形になるので簡単。&lt;/p&gt;

&lt;p&gt;再急降下法を早く収束させるために、まずできることはサンプルを正規化すること。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;feature scaling: とりあえず最大値で割って 0 =&amp;lt; x =&amp;lt; 1 にする&lt;/li&gt;
&lt;li&gt;mean normalization: 平均で引いてから、最大値と最小値の幅で割って -0.5 =&amp;lt; x =&amp;lt; 0.5にする&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;あと再急降下法の収束を決める要素として、学習率αと離散値を扱うので収束と決める条件を設定しないといけない。
それぞれ決めが難しいので、再急降下法の試行回数と &lt;code&gt;J(theta)&lt;/code&gt; の値のプロットを取って良さそうな値を決めるしかない。&lt;/p&gt;

&lt;h3 id=&#34;octave&#34;&gt;Octave&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;a&lt;/code&gt; の少数第二位まで表示。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;disp(sprintf(&#39;%0.2f), a)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;3x2 の行列を宣言できる。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;A = [1 2;
     3 4;
     5 6]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Aの2行目、2列目だけを抜き出す。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;A(2,:)
A(:,2)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Aに行列を追加する。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;A = [A, [100; 101; 102]]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Aのすべての要素を1つのベクトルにまとめる。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;A(:)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;2x3 のすべての要素が1と0の行列ができる。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ones(2, 3)
zeros(2, 3)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;1x10000のランダムなベクトルを作って、ヒストグラムとして表示する。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;w = randn(1, 10000)
hist(w, 50)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;4x4の単位行列を作る。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;eye(4)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;行列のサイズを調べる。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;size(X)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ベクトルの長さを調べる。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;length(v)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ファイルに入ったデータを読み込んで、データが格納されている変数を確認する。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;load(&#39;foo.dat&#39;)
who
whos
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;変数をクリアする。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;clear x
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;変数をファイルに保存する。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;save hello.mat v
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>coursera note</title>
      <link>https://ymotongpoo.github.io/tech/2017/02/14/coursera-note/</link>
      <pubDate>Tue, 14 Feb 2017 12:50:46 +0900</pubDate>
      
      <guid>https://ymotongpoo.github.io/tech/2017/02/14/coursera-note/</guid>
      <description>

&lt;h2 id=&#34;week-1&#34;&gt;Week 1&lt;/h2&gt;

&lt;h3 id=&#34;introduction&#34;&gt;Introduction&lt;/h3&gt;

&lt;p&gt;2つのタイプの機械学習がある。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;regression （回帰）: 連続値&lt;/li&gt;
&lt;li&gt;classification （分類）: ラベリング&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ほかにもこういう分け方もある。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;supervised （教師あり）: サンプルに正解がすでに存在している&lt;/li&gt;
&lt;li&gt;unsupervised （教師なし）: サンプルはただ存在している&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;model-and-cost-function&#34;&gt;Model and Cost Function&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;x: input (サンプル)&lt;/li&gt;
&lt;li&gt;y: output (結果)&lt;/li&gt;
&lt;li&gt;m: サンプル数&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;たとえば教師ありの回帰問題を考える。仮説関数 (hypothesis)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;h(x) = theta0 + theta1 x
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これは線形回帰かつ単回帰（線形に表現され、変数が1個）な場合の仮説関数。
この関数をサンプルから求めるために目的関数（コスト関数）を用意する。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;J(theta0, theta1) = 1/2m sum(( h(x) - y )^2)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これを最小にする&lt;code&gt;theta0&lt;/code&gt;と&lt;code&gt;theta1&lt;/code&gt;を自動で求めていきたいということになる。&lt;/p&gt;

&lt;h3 id=&#34;parameter-learning&#34;&gt;Parameter Learning&lt;/h3&gt;

&lt;p&gt;いろいろな方法があるけれど、再急降下法でやっていくのが一般的。
各パラメータで偏微分して、各パラメータを減らしていく。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;theta(j) := theta(j) - alpha * grad(J, theta(j))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;プログラムで書くときは値の更新が各変数で同時になるように注意。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;alpha&lt;/code&gt; は学習率と呼ばれる正の値。いい具合に決めてやらないと発散しちゃうので注意。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Identity関連とか</title>
      <link>https://ymotongpoo.github.io/tech/2017/01/31/identity-related-specs/</link>
      <pubDate>Tue, 31 Jan 2017 16:18:08 +0900</pubDate>
      
      <guid>https://ymotongpoo.github.io/tech/2017/01/31/identity-related-specs/</guid>
      <description>

&lt;h2 id=&#34;pkceについて&#34;&gt;PKCEについて&lt;/h2&gt;

&lt;p&gt;*&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>AndroidのActivityを終了させる</title>
      <link>https://ymotongpoo.github.io/tech/2017/01/27/finish-android-activity/</link>
      <pubDate>Fri, 27 Jan 2017 15:34:45 +0900</pubDate>
      
      <guid>https://ymotongpoo.github.io/tech/2017/01/27/finish-android-activity/</guid>
      <description>

&lt;h2 id=&#34;activityを終了させる&#34;&gt;Activityを終了させる&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.android.com/reference/android/support/v7/app/AppCompatActivity.html&#34;&gt;android.support.v7.app.AppCompatActivity &amp;ndash; DAC&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/okaxaki/items/f3a4a4ab0616ac2f68ed&#34;&gt;Activity#finish() でアプリが終了できないときは &amp;ndash; Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;最後のActivityで &lt;code&gt;Activity#finish()&lt;/code&gt; してもタスクが終わらないことがあるので、ちゃんと &lt;code&gt;Activity#finishAndRemoveTask()&lt;/code&gt; を呼ぶこと。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;void finishAndRemoveTask()
Call this when your activity is done and should be closed and the task should be completely removed as a part of finishing the root activity of the task.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;loaderについて&#34;&gt;Loaderについて&lt;/h2&gt;

&lt;p&gt;ActivityのライフサイクルとAsyncTaskとの分離がLoaderによって可能になった。（&lt;code&gt;AsyncTaskLoader&lt;/code&gt; とか &lt;code&gt;CursorLoader&lt;/code&gt;）&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/KeithYokoma/items/03420e791548153c0811&#34;&gt;Loaderについて知っておいたほうが良いこと３つ &amp;ndash; Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.android.com/guide/components/loaders.html?hl=ja&#34;&gt;Loader &amp;ndash; DAC&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;fragmentを作るとき&#34;&gt;Fragmentを作るとき&lt;/h2&gt;

&lt;p&gt;いらんものをいっぱい作るのでチェックはぜんぶはずそう。（これではまった）&lt;/p&gt;

&lt;figure&gt;
  &lt;amp-img src=&#34;https://ymotongpoo.github.io/img/2017-01-27-001.png&#34; alt=&#34;AndroidのActivityを終了させる img/2017-01-27-001.png&#34; width=547px height=470px layout=&gt;&lt;/amp-img&gt;
  
&lt;/figure&gt;

</description>
    </item>
    
    <item>
      <title>Jupyter Notebookのインストール</title>
      <link>https://ymotongpoo.github.io/tech/2017/01/12/installing-jupyter-notebook/</link>
      <pubDate>Thu, 12 Jan 2017 13:45:26 +0900</pubDate>
      
      <guid>https://ymotongpoo.github.io/tech/2017/01/12/installing-jupyter-notebook/</guid>
      <description>

&lt;h2 id=&#34;jupyter-notebookのインストール&#34;&gt;Jupyter Notebookのインストール&lt;/h2&gt;

&lt;p&gt;いい感じにipythonをブラウザ上で使ったりして、履歴も保存できたりする便利なやつ。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-zsh&#34;&gt;% python3 -m venv jupyter
% cd jupyter
% pip3 install jupyter numpy scipy scikit-learn pandas
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これで問題なくインストールできた。楽。&lt;/p&gt;

&lt;h2 id=&#34;jupyter-notebookの起動&#34;&gt;Jupyter Notebookの起動&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-zsh&#34;&gt;% jupyter notebook
[I 11:29:00.155 NotebookApp] Serving notebooks from local directory:
/usr/local/google/home/yoshifumi/src/projects/jupyter
[I 11:29:00.155 NotebookApp] 0 active kernels
[I 11:29:00.155 NotebookApp] The Jupyter Notebook is running at:
http://localhost:8888/?token=3472f8ea9c4afb02dcba5d04bf417edc9f744448c847aece
[I 11:29:00.155 NotebookApp] Use Control-C to stop this server and shut down all kernels (twice to skip confirmation).
[W 11:29:00.156 NotebookApp] No web browser found: could not locate runnable browser.
[C 11:29:00.156 NotebookApp]

     Copy/paste this URL into your browser when you connect for the first time,
     to login with a token:
         http://localhost:8888/?token=3472f8ea9c4afb02dcba5d04bf417edc9f744448c847aece

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これで立ち上がってるのでログの下部に書いてあるURLにアクセスする。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Python3.6をLinuxにインストールした</title>
      <link>https://ymotongpoo.github.io/tech/2017/01/11/installing-python3.6-on-linux/</link>
      <pubDate>Wed, 11 Jan 2017 13:51:58 +0900</pubDate>
      
      <guid>https://ymotongpoo.github.io/tech/2017/01/11/installing-python3.6-on-linux/</guid>
      <description>

&lt;h2 id=&#34;python3-6のダウンロード&#34;&gt;Python3.6のダウンロード&lt;/h2&gt;

&lt;p&gt;公式サイトからtar.gzをダウンロードして展開。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-zsh&#34;&gt;% sudo mkdir /opt/python
% sudo chown ymotongpoo /opt/python
% mv ~/Download/Python-3.6.0.tgz /opt/python
% cd /opt/python/
% tar xzf Python-3.6.0.tgz
% cd Python-3.6.0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;必要なパッケージをインストールしておく。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-zsh&#34;&gt;% sudo apt-get install zlib1g-dev bzip2 libbz2-dev libreadline6-dev libjpeg62 \
libjpeg62-dev libsqlite3-0 libsqlite3-dev libgdbm3 libgdbm-dev libssl1.0.0 \
libssl-dev tk8.6-dev 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Pythonのconfigureはこんな感じ。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-zsh&#34;&gt;% ./configure --prefix=/opt/python/3.6.0 \
              --with-threads \
              --with-computed-gotos \
              --enable-optimizations \
              --enable-ipv6 \
              --with-system-expat \
              --with-dbmliborder=gdbm:ndbm \
              --with-system-ffi \
              --with-system-libmpdec \
              --enable-loadable-sqlite-extensions
% make &amp;amp;&amp;amp; make install
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;インストールできたかのテスト&#34;&gt;インストールできたかのテスト&lt;/h2&gt;

&lt;p&gt;実際にPython3のコマンドを叩いてみるだけの簡単なテスト。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-zsh&#34;&gt;% which python3
/opt/python/3.6.0/bin/python3
% python3
Error in sitecustomize; set PYTHONVERBOSE for traceback:
ModuleNotFoundError: No module named &#39;__builtin__&#39;
Python 3.6.0 (default, Jan 11 2017, 17:46:21)
[GCC 4.8.4] on linux
Type &amp;quot;help&amp;quot;, &amp;quot;copyright&amp;quot;, &amp;quot;credits&amp;quot; or &amp;quot;license&amp;quot; for more information.
&amp;gt;&amp;gt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;あれ、なんかエラーでてる。よく見てみたら &lt;code&gt;PYTHONPATH&lt;/code&gt; に変な値が入ってる。
しかしこれはインストール先の環境では勝手に変更したらいけないものなので困った。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-zsh&#34;&gt;% python3 -E
Python 3.6.0 (default, Jan 11 2017, 17:46:21)
[GCC 4.8.4] on linux
Type &amp;quot;help&amp;quot;, &amp;quot;copyright&amp;quot;, &amp;quot;credits&amp;quot; or &amp;quot;license&amp;quot; for more information.
&amp;gt;&amp;gt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;確かに &lt;code&gt;PYTHONPATH&lt;/code&gt; なしで起動したら問題なくできた。&lt;/p&gt;

&lt;h2 id=&#34;しかたなくworkaround&#34;&gt;しかたなくworkaround&lt;/h2&gt;

&lt;p&gt;仕方ないので、 &lt;code&gt;venv&lt;/code&gt; で環境を作った後、 &lt;code&gt;activate&lt;/code&gt; スクリプトでいじることにした。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-zsh&#34;&gt;% python3 -E -m venv jupyter
% cd jupyter
% vim bin/activate  # この中でほかの環境変数と同様にPYTHONPATHをいじる設定を書いた
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これでうまくいった。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>wercker使うのをあきらめた（けど、頑張ったらできた）</title>
      <link>https://ymotongpoo.github.io/tech/2017/01/09/no-more-wercker/</link>
      <pubDate>Mon, 09 Jan 2017 01:40:22 +0900</pubDate>
      
      <guid>https://ymotongpoo.github.io/tech/2017/01/09/no-more-wercker/</guid>
      <description>

&lt;h2 id=&#34;ciでgithub-pagesの更新をしようと思った&#34;&gt;CIでGitHub pagesの更新をしようと思った&lt;/h2&gt;

&lt;p&gt;このサイトの更新をGitHubに&lt;code&gt;source&lt;/code&gt;ブランチからpushしただけでできるようにしようと思って、werckerでやろうと画策したんだけどどうやっても動かない。試したのは次のような感じ。&lt;/p&gt;

&lt;h2 id=&#34;personal-access-tokenを使っての方法&#34;&gt;Personal access tokenを使っての方法&lt;/h2&gt;

&lt;p&gt;Personal access tokenを使えばGitHubへのアクセスがかなり制限できるし、いざとなったらトークンを消せばいいだけなので、まずはそれでやろうと思い立った。&lt;/p&gt;

&lt;p&gt;Personal access tokenをwerckerみたいに毎回初期化される環境でやるには、&lt;code&gt;.netrc&lt;/code&gt;に次のように書いておけばいいと思ってやってみた。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;machine github.com
login ymotongpoo
password xxxxx
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;しかしどうもwerckerはpushの際にはSSHプロトコルを使っているようで次のようなエラーではじかれた。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Host key verification failed.
fatal: Could not read from remote repository.

Please make sure you have the correct access rights
and the repository exists.
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;ssh認証を使う方法&#34;&gt;SSH認証を使う方法&lt;/h2&gt;

&lt;h3 id=&#34;自分でssh鍵を生成する場合&#34;&gt;自分でSSH鍵を生成する場合&lt;/h3&gt;

&lt;p&gt;自分のLinuxマシンで &lt;code&gt;ssh-keygen&lt;/code&gt; で生成した公開鍵をGitHubのSSH鍵設定のところに登録し、秘密鍵をwerckerのpipelineの環境変数部分に登録。（名前は &lt;code&gt;MYPACKAGE_KEY_PRIVATE&lt;/code&gt;）とした。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;wercker.yml&lt;/code&gt; で &lt;code&gt;steps&lt;/code&gt; に &lt;code&gt;add-ssh-key&lt;/code&gt; を登録してみたもののやっぱり先と同様に失敗。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://devcenter.wercker.com/docs/ssh-keys/using-ssh-keys&#34;&gt;Using SSH Keys&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;werckerでssh鍵を生成する場合&#34;&gt;werckerでSSH鍵を生成する場合&lt;/h3&gt;

&lt;p&gt;先のリンクに並んでSSH鍵をwercker側で設定する方法があったので、それも設定してみた。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://devcenter.wercker.com/docs/ssh-keys/generating-ssh-keys&#34;&gt;Generating SSH Keys&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;これで生成しても同様のエラーではじかれる。&lt;/p&gt;

&lt;h3 id=&#34;上記の方法をdeploy-keyで試す場合&#34;&gt;上記の方法をdeploy keyで試す場合&lt;/h3&gt;

&lt;p&gt;公開鍵をGitHubのdeploy keyとして登録し、write accessを与えてみたもののやはり失敗した。&lt;/p&gt;

&lt;h2 id=&#34;結論&#34;&gt;結論&lt;/h2&gt;

&lt;p&gt;別のCI使おう&amp;hellip;&lt;/p&gt;

&lt;h2 id=&#34;つづき&#34;&gt;つづき&lt;/h2&gt;

&lt;p&gt;癪なのでもう一度よく設定を調べてみたら次のページを見つけた。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://devcenter.wercker.com/docs/git/submodules&#34;&gt;Using Git Submodules&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;pushをする方法じゃないけれど、ここにSSH鍵の登録にホストを設定する方法とfingerprintの登録をする手順が書いてあった。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    - add-ssh-key:
        keyname: KEY_NAME
        host: github.com
    - add-to-known_hosts:
        hostname: github.com
        fingerprint: 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これに則って、fingerprintを登録した。ただこれをコピペしただけではだめで、自分のdocker imageのOpenSSHが新しいのでSHA256のfingerprintが必要だった。&lt;/p&gt;

&lt;p&gt;調べてみたら、GitHubのほうにSHA256のfingerprintも書いてあった。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://help.github.com/articles/what-are-github-s-ssh-key-fingerprints/&#34;&gt;What are GitHub&amp;rsquo;s SSH key fingerprints?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;というわけで次のように変更してみたら無事にpushできた。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    - add-ssh-key:
        keyname: MYPACKAGE_KEY
        host: github.com
    - add-to-known_hosts:
        hostname: github.com
        fingerprint: SHA256:nThbg6kXUpJWGl7E1IGOCspRomTxdCARLviKw6E5SY8
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;おまけ&#34;&gt;おまけ&lt;/h2&gt;

&lt;p&gt;werckerのbuildのpipelineで全部書いていたので、&lt;code&gt;source&lt;/code&gt;ブランチのビルドが終わって&lt;code&gt;master&lt;/code&gt;にpushすると、今度はそれをトリガーにしてまたpipelineが始まってしまう。以前はあったように思うのだけど、最初のpipelineを起動するブランチは指定できないみたいなので、ワークアラウンドとして&lt;code&gt;master&lt;/code&gt;ブランチに&lt;code&gt;wercker.yml&lt;/code&gt;を置いて、ただ&lt;code&gt;echo&lt;/code&gt;させるだけにして、pipeline自体が異常終了しないようにした。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Git Credential Manger for WinをMSYS2のgitで使う</title>
      <link>https://ymotongpoo.github.io/tech/2016/12/31/use-git-credential-manager-for-win-with-msys2/</link>
      <pubDate>Sat, 31 Dec 2016 12:41:35 +0900</pubDate>
      
      <guid>https://ymotongpoo.github.io/tech/2016/12/31/use-git-credential-manager-for-win-with-msys2/</guid>
      <description>

&lt;h1 id=&#34;なぜgcm-for-winが必要か&#34;&gt;なぜGCM for Winが必要か&lt;/h1&gt;

&lt;h2 id=&#34;githubで2要素認証をしている&#34;&gt;GitHubで2要素認証をしている&lt;/h2&gt;

&lt;p&gt;2要素認証にすると、アクセストークンを発行しないと普通にHTTPSでpushができない。しかし、アクセストークンを発行しても、それを記憶していないといけない。そこでMacやLinuxのときと同様に、Git Credential Managerを利用しようと思った次第。&lt;/p&gt;

&lt;h2 id=&#34;gitはmsys2で入れていた&#34;&gt;Gitはmsys2で入れていた&lt;/h2&gt;

&lt;p&gt;いくつかの選択肢があるけれど、自分はすでにMSYS2でGitをインストールしてしまっていたので、Git Credential Managerのためだけに、再度Gitをインストーラーで入れるのは嫌だった。もしそれが問題ないなら、バイナリインストーラーを使うのが良い。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/Microsoft/Git-Credential-Manager-for-Windows/releases/latest&#34;&gt;Git Credential Manager for Windows latest build&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;そこで、上記のリンクにあったzipのものをダウンロードし、GCMだけを単体でインストールした。中に同梱されている &lt;code&gt;install.cmd&lt;/code&gt; を実行しておしまい。すると &lt;code&gt;git-credential-manager.exe&lt;/code&gt; 等々が &lt;code&gt;%USERPROFILE%\bin&lt;/code&gt; にインストールされる。これにPATHが通るようにMSYS2の &lt;code&gt;.zshenv&lt;/code&gt; に次のように追加しておいた。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shellscript&#34;&gt;PATH=$PATH:/c/Users/&amp;lt;username&amp;gt;/bin
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;git-configで利用する旨を設定する&#34;&gt;git configで利用する旨を設定する&lt;/h2&gt;

&lt;p&gt;MacやLinuxの場合と同様に &lt;code&gt;git config&lt;/code&gt; で設定しておく。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ git config --global credential.helper manager
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これで通常通り &lt;code&gt;git push&lt;/code&gt; などを行うとこういうポップアップが出るようになって2要素認証でログインできた。&lt;/p&gt;

&lt;figure&gt;
  &lt;amp-img src=&#34;https://ymotongpoo.github.io/img/2016-12-31-001.png&#34; alt=&#34;Git Credential Manger for WinをMSYS2のgitで使う img/2016-12-31-001.png&#34; width=409px height=338px layout=&gt;&lt;/amp-img&gt;
  
&lt;/figure&gt;


&lt;p&gt;一度ログインしてしまえば2回目以降は自動で認証されるのでなにも入力しなくてよい。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>MSYS2のzshでのPATHについて</title>
      <link>https://ymotongpoo.github.io/tech/2016/12/30/path-on-zsh-of-msys2/</link>
      <pubDate>Fri, 30 Dec 2016 15:49:41 +0900</pubDate>
      
      <guid>https://ymotongpoo.github.io/tech/2016/12/30/path-on-zsh-of-msys2/</guid>
      <description>

&lt;h1 id=&#34;msys2のzshでpathがうまく反映されなかった&#34;&gt;MSYS2のzshでPATHがうまく反映されなかった&lt;/h1&gt;

&lt;h2 id=&#34;きっかけ&#34;&gt;きっかけ&lt;/h2&gt;

&lt;p&gt;MSYS2の開発環境もいい感じになってきたので、そろそろ .zshenv なんかも設定するかと思っていじってたら、なぜか &lt;code&gt;.zshenv&lt;/code&gt; で設定したPATHが &lt;code&gt;.zshrc&lt;/code&gt; では吹っ飛んでるという事象に遭遇したので調べた。&lt;/p&gt;

&lt;h2 id=&#34;zshでの設定ファイルの読み込み順&#34;&gt;zshでの設定ファイルの読み込み順&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://zsh.sourceforge.net/Intro/intro_3.html&#34;&gt;zshell - startup files&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
&lt;li&gt;.zshenv&lt;/li&gt;
&lt;li&gt;.zprofile&lt;/li&gt;
&lt;li&gt;.zshrc&lt;/li&gt;
&lt;li&gt;.zlogin&lt;/li&gt;
&lt;li&gt;.zlogout&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;code&gt;.zshenv&lt;/code&gt; でちゃんと値が取れてて、 &lt;code&gt;.zshrc&lt;/code&gt; で値が取れてないということは、この順番でいくと &lt;code&gt;.zprofile&lt;/code&gt; がなんかやってるはず。でも、 &lt;code&gt;.zprofile&lt;/code&gt; は作ってないので、となるとデフォルトの &lt;code&gt;zprofile&lt;/code&gt; があってそちらでなんかやってるはず。&lt;/p&gt;

&lt;h2 id=&#34;etc-zsh-zprofile&#34;&gt;&lt;code&gt;/etc/zsh/zprofile&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;中身をみたらこれだけしか書いてなかった。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;% cat /etc/zsh/zprofile
emulate sh -c &#39;source /etc/profile&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;etc-profile&#34;&gt;&lt;code&gt;/etc/profile&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;ここで &lt;code&gt;$PATH&lt;/code&gt; を設定しているところを見てみるとこんな行があった。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;case &amp;quot;${MSYSTEM}&amp;quot; in                                                                       
MINGW32)                                                                                   
  MINGW_MOUNT_POINT=&amp;quot;${MINGW_PREFIX}&amp;quot;                                                      
  PATH=&amp;quot;${MINGW_MOUNT_POINT}/bin:${MSYS2_PATH}${ORIGINAL_PATH:+:${ORIGINAL_PATH}}&amp;quot;         
  PKG_CONFIG_PATH=&amp;quot;${MINGW_MOUNT_POINT}/lib/pkgconfig:${MINGW_MOUNT_POINT}/share/pkgconfig&amp;quot;
  ACLOCAL_PATH=&amp;quot;${MINGW_MOUNT_POINT}/share/aclocal:/usr/share/aclocal&amp;quot;                     
  MANPATH=&amp;quot;${MINGW_MOUNT_POINT}/share/man:${MANPATH}&amp;quot;                                      
  ;;                                                                                       
MINGW64)                                                                                   
  MINGW_MOUNT_POINT=&amp;quot;${MINGW_PREFIX}&amp;quot;                                                      
  PATH=&amp;quot;${MINGW_MOUNT_POINT}/bin:${MSYS2_PATH}${ORIGINAL_PATH:+:${ORIGINAL_PATH}}&amp;quot;         
  PKG_CONFIG_PATH=&amp;quot;${MINGW_MOUNT_POINT}/lib/pkgconfig:${MINGW_MOUNT_POINT}/share/pkgconfig&amp;quot;
  ACLOCAL_PATH=&amp;quot;${MINGW_MOUNT_POINT}/share/aclocal:/usr/share/aclocal&amp;quot;                     
  MANPATH=&amp;quot;${MINGW_MOUNT_POINT}/share/man:${MANPATH}&amp;quot;                                      
  ;;                                                                                       
*)                                                                                         
  PATH=&amp;quot;${MSYS2_PATH}:/opt/bin${ORIGINAL_PATH:+:${ORIGINAL_PATH}}&amp;quot;                         
  PKG_CONFIG_PATH=&amp;quot;/usr/lib/pkgconfig:/usr/share/pkgconfig:/lib/pkgconfig&amp;quot;                 
esac
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;どうやら &lt;code&gt;$ORIGINAL_PATH&lt;/code&gt; というのが怪しいので、それを探してみるとあった。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;case &amp;quot;${MSYS2_PATH_TYPE:-minimal}&amp;quot; in                                                                                      
  strict)                                                                                                                  
    # Do not inherit any path configuration, and allow for full customization                                              
    # of external path. This is supposed to be used in special cases such as                                               
    # debugging without need to change this file, but not daily usage.                                                     
    unset ORIGINAL_PATH                                                                                                    
    ;;                                                                                                                     
  inherit)                                                                                                                 
    # Inherit previous path. Note that this will make all of the Windows path                                              
    # available in current shell, with possible interference in project builds.                                            
    ORIGINAL_PATH=&amp;quot;${ORIGINAL_PATH:-${PATH}}&amp;quot;                                                                              
    ;;                                                                                                                     
  *)                                                                                                                       
    # Do not inherit any path configuration but configure a default Windows path                                           
    # suitable for normal usage with minimal external interference.                                                        
    WIN_ROOT=&amp;quot;$(PATH=${MSYS2_PATH} cygpath -Wu)&amp;quot;                                                                           
    ORIGINAL_PATH=&amp;quot;${WIN_ROOT}/System32:${WIN_ROOT}:${WIN_ROOT}/System32/Wbem:${WIN_ROOT}/System32/WindowsPowerShell/v1.0/&amp;quot;
esac
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;もろに &lt;code&gt;ORIGINAL_PATH&lt;/code&gt; の設定が、 &lt;code&gt;$MSYS2_PATH_TYPE&lt;/code&gt; の値で変わるっぽく、これを見る限り、 &lt;code&gt;inherit&lt;/code&gt; に設定しておけばよいっぽい。&lt;/p&gt;

&lt;h2 id=&#34;zshenv-に追記&#34;&gt;&lt;code&gt;.zshenv&lt;/code&gt; に追記&lt;/h2&gt;

&lt;p&gt;次の1文を書いたら期待通りに設定された。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;export MSYS2_PATH_TYPE=&amp;quot;inherit&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>バッチファイルではまった</title>
      <link>https://ymotongpoo.github.io/tech/2016/12/27/batch-script/</link>
      <pubDate>Tue, 27 Dec 2016 02:10:20 +0900</pubDate>
      
      <guid>https://ymotongpoo.github.io/tech/2016/12/27/batch-script/</guid>
      <description>

&lt;h1 id=&#34;バッチファイルではまった&#34;&gt;バッチファイルではまった&lt;/h1&gt;

&lt;h2 id=&#34;shellscriptからbatch-scriptに移植していた&#34;&gt;shellscriptからbatch scriptに移植していた&lt;/h2&gt;

&lt;p&gt;ffmpegでバッチ処理をするスクリプトをWindows用に移植するためにbatch scriptにしていたときにいくつかはまったのでメモしておく。&lt;/p&gt;

&lt;h3 id=&#34;for文&#34;&gt;for文&lt;/h3&gt;

&lt;p&gt;変数は &lt;code&gt;%%[アルファベット1文字]&lt;/code&gt; でないといけない。希望の動作を調べた結果次のようになった。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bat&#34;&gt;for /f &amp;quot;usebackq&amp;quot; %%f in (`dir /b /s *.ts`) do (
    echo %%f
)
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;/f &amp;quot;usebackq&amp;quot;&lt;/code&gt; は空白を含むファイル名を扱うときに必要&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dir&lt;/code&gt; コマンドのあとのオプションはそれぞれ

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;/b&lt;/code&gt; : ファイル名だけ表示&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/s&lt;/code&gt; : サブツリーも検索&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;改行&#34;&gt;改行&lt;/h3&gt;

&lt;p&gt;shellscriptではバックスラッシュ &lt;code&gt;\&lt;/code&gt; で改行するけど、batch scriptではハット &lt;code&gt;^&lt;/code&gt; でやる。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>MacBook ProのWifiが頻繁に切れるようになったので対応した</title>
      <link>https://ymotongpoo.github.io/tech/2016/12/25/unstable-mbp-wifi/</link>
      <pubDate>Sun, 25 Dec 2016 11:48:49 +0900</pubDate>
      
      <guid>https://ymotongpoo.github.io/tech/2016/12/25/unstable-mbp-wifi/</guid>
      <description>

&lt;h1 id=&#34;macbook-proのwifiが頻繁に切断されるようになった&#34;&gt;MacBook ProのWifiが頻繁に切断されるようになった&lt;/h1&gt;

&lt;h2 id=&#34;macbook-pro側の対応&#34;&gt;MacBook Pro側の対応&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://ottan.xyz/mac-wi-fi-1143/&#34;&gt;このへん&lt;/a&gt; を見つつ対応した。根本的な原因がわからないのが気持ち悪いけど、対処療法でとりあえず実施。実際に行ったのは次の作業。&lt;/p&gt;

&lt;h3 id=&#34;library-preferences-systemconfiguraiton-以下のシステムファイルを削除&#34;&gt;&lt;code&gt;/Library/Preferences/SystemConfiguraiton&lt;/code&gt; 以下のシステムファイルを削除&lt;/h3&gt;

&lt;p&gt;これらのファイルを削除。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;com.apple.airport.preferences.plist&lt;/li&gt;
&lt;li&gt;com.apple.captive.probe.plist&lt;/li&gt;
&lt;li&gt;com.apple.network.eapolclient.configuration.plist&lt;/li&gt;
&lt;li&gt;com.apple.wifi.message-tracer.plist&lt;/li&gt;
&lt;li&gt;NetworkInterfaces.plist&lt;/li&gt;
&lt;li&gt;preferences.plist&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;mtuの確認&#34;&gt;MTUの確認&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;MTUの設定値 - 28&lt;/code&gt; でパケットサイズ作って送ってみたら安定してたのでデフォルトの1500から特に変更しない。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;% ping -D -s 1472 192.168.1.1
PING 192.168.1.1 (192.168.1.1): 1472 data bytes
1480 bytes from 192.168.1.1: icmp_seq=0 ttl=64 time=1.366 ms
1480 bytes from 192.168.1.1: icmp_seq=1 ttl=64 time=1.060 ms
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;dns-ホスト名-ipv6の設定&#34;&gt;DNS、ホスト名、IPv6の設定&lt;/h3&gt;

&lt;p&gt;ネットワーク設定を全部消したので再設定。以前の通り、DNSはGoogle Public DNSを参照するように設定。&lt;/p&gt;

&lt;p&gt;IPv6はリンクローカルのみで使用するように設定。&lt;/p&gt;

&lt;p&gt;またホスト名の設定が消えているので、 [システム環境設定] &amp;gt; [共有] から設定し直し。&lt;/p&gt;

&lt;h2 id=&#34;ルータ側の設定&#34;&gt;ルータ側の設定&lt;/h2&gt;

&lt;h3 id=&#34;チャンネルの変更&#34;&gt;チャンネルの変更&lt;/h3&gt;

&lt;figure&gt;
  &lt;amp-img src=&#34;https://ymotongpoo.github.io/img/2016-12-25-001.png&#34; alt=&#34;MacBook ProのWifiが頻繁に切れるようになったので対応した img/2016-12-25-001.png&#34; width=230px height=310px layout=&gt;&lt;/amp-img&gt;
  
&lt;/figure&gt;


&lt;p&gt;「ワイヤレス診断」で最適なチャンネルが提案される（[ウィンドウ] &amp;gt; [スキャン]）ので、そのチャンネルを設定するように変更。ただ、まわりの家から飛んでるWifiが鑑賞しまくっててあまり影響はないかもしれないけど、それでも何度かスキャンを実行して、一番推奨チャンネルとして表示される回数が多かったものに変更。&lt;/p&gt;

&lt;div class=&#34;clearfix&#34;&gt;&lt;/div&gt;

</description>
    </item>
    
    <item>
      <title>scikit-learnを使える環境を整える</title>
      <link>https://ymotongpoo.github.io/tech/2016/12/21/setting-up-sklearn/</link>
      <pubDate>Wed, 21 Dec 2016 23:35:31 +0900</pubDate>
      
      <guid>https://ymotongpoo.github.io/tech/2016/12/21/setting-up-sklearn/</guid>
      <description>

&lt;h2 id=&#34;scikit-learnとは&#34;&gt;scikit-learnとは&lt;/h2&gt;

&lt;p&gt;機械学習をPythonで簡単に扱うためのライブラリ。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://scikit-learn.org/stable/&#34;&gt;scikit-learn&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;python-3-5環境のセットアップ&#34;&gt;Python 3.5環境のセットアップ&lt;/h2&gt;

&lt;p&gt;現在時点での最新版をインストールする。MacPortsを利用しているので次の通り。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;% sudo port install python35
% sudo port install py35-virtualenv py35-virtualenvwrapper
% sudo port select --set virtualenv virtualenv35
% mkvirtualenv sklearn
(sklearn) %
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;scikit-learnのインストールと確認&#34;&gt;scikit-learnのインストールと確認&lt;/h2&gt;

&lt;p&gt;依存関係があるものを先にインストールしてからインストール。　&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;% pip install numpy scipy
% pip install sklearn
% python
Python 3.5.2 (default, Dec 17 2016, 06:22:44)
[GCC 4.2.1 Compatible Apple LLVM 7.0.2 (clang-700.1.81)] on darwin
Type &amp;quot;help&amp;quot;, &amp;quot;copyright&amp;quot;, &amp;quot;credits&amp;quot; or &amp;quot;license&amp;quot; for more information.
&amp;gt;&amp;gt;&amp;gt; from sklearn import svm
&amp;gt;&amp;gt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;無事インストール出来ました。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>