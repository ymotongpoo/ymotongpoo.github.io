<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Windows on depository</title>
    <link>https://ymotongpoo.github.io/tags/windows/index.xml</link>
    <description>Recent content in Windows on depository</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <atom:link href="https://ymotongpoo.github.io/tags/windows/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Git Credential Manger for WinをMSYS2のgitで使う</title>
      <link>https://ymotongpoo.github.io/tech/2016/12/31/use-git-credential-manager-for-win-with-msys2/</link>
      <pubDate>Sat, 31 Dec 2016 12:41:35 +0900</pubDate>
      
      <guid>https://ymotongpoo.github.io/tech/2016/12/31/use-git-credential-manager-for-win-with-msys2/</guid>
      <description>

&lt;h1 id=&#34;なぜgcm-for-winが必要か&#34;&gt;なぜGCM for Winが必要か&lt;/h1&gt;

&lt;h2 id=&#34;githubで2要素認証をしている&#34;&gt;GitHubで2要素認証をしている&lt;/h2&gt;

&lt;p&gt;2要素認証にすると、アクセストークンを発行しないと普通にHTTPSでpushができない。しかし、アクセストークンを発行しても、それを記憶していないといけない。そこでMacやLinuxのときと同様に、Git Credential Managerを利用しようと思った次第。&lt;/p&gt;

&lt;h2 id=&#34;gitはmsys2で入れていた&#34;&gt;Gitはmsys2で入れていた&lt;/h2&gt;

&lt;p&gt;いくつかの選択肢があるけれど、自分はすでにMSYS2でGitをインストールしてしまっていたので、Git Credential Managerのためだけに、再度Gitをインストーラーで入れるのは嫌だった。もしそれが問題ないなら、バイナリインストーラーを使うのが良い。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/Microsoft/Git-Credential-Manager-for-Windows/releases/latest&#34;&gt;Git Credential Manager for Windows latest build&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;そこで、上記のリンクにあったzipのものをダウンロードし、GCMだけを単体でインストールした。中に同梱されている &lt;code&gt;install.cmd&lt;/code&gt; を実行しておしまい。すると &lt;code&gt;git-credential-manager.exe&lt;/code&gt; 等々が &lt;code&gt;%USERPROFILE%\bin&lt;/code&gt; にインストールされる。これにPATHが通るようにMSYS2の &lt;code&gt;.zshenv&lt;/code&gt; に次のように追加しておいた。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shellscript&#34;&gt;PATH=$PATH:/c/Users/&amp;lt;username&amp;gt;/bin
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;git-configで利用する旨を設定する&#34;&gt;git configで利用する旨を設定する&lt;/h2&gt;

&lt;p&gt;MacやLinuxの場合と同様に &lt;code&gt;git config&lt;/code&gt; で設定しておく。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ git config --global credential.helper manager
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これで通常通り &lt;code&gt;git push&lt;/code&gt; などを行うとこういうポップアップが出るようになって2要素認証でログインできた。&lt;/p&gt;

&lt;figure&gt;
  &lt;amp-img src=&#34;https://ymotongpoo.github.io/img/2016-12-31-001.png&#34; alt=&#34;Git Credential Manger for WinをMSYS2のgitで使う img/2016-12-31-001.png&#34; width=409px height=338px layout=&gt;&lt;/amp-img&gt;
  
&lt;/figure&gt;


&lt;p&gt;一度ログインしてしまえば2回目以降は自動で認証されるのでなにも入力しなくてよい。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>バッチファイルではまった</title>
      <link>https://ymotongpoo.github.io/tech/2016/12/27/batch-script/</link>
      <pubDate>Tue, 27 Dec 2016 02:10:20 +0900</pubDate>
      
      <guid>https://ymotongpoo.github.io/tech/2016/12/27/batch-script/</guid>
      <description>

&lt;h1 id=&#34;バッチファイルではまった&#34;&gt;バッチファイルではまった&lt;/h1&gt;

&lt;h2 id=&#34;shellscriptからbatch-scriptに移植していた&#34;&gt;shellscriptからbatch scriptに移植していた&lt;/h2&gt;

&lt;p&gt;ffmpegでバッチ処理をするスクリプトをWindows用に移植するためにbatch scriptにしていたときにいくつかはまったのでメモしておく。&lt;/p&gt;

&lt;h3 id=&#34;for文&#34;&gt;for文&lt;/h3&gt;

&lt;p&gt;変数は &lt;code&gt;%%[アルファベット1文字]&lt;/code&gt; でないといけない。希望の動作を調べた結果次のようになった。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bat&#34;&gt;for /f &amp;quot;usebackq&amp;quot; %%f in (`dir /b /s *.ts`) do (
    echo %%f
)
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;/f &amp;quot;usebackq&amp;quot;&lt;/code&gt; は空白を含むファイル名を扱うときに必要&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dir&lt;/code&gt; コマンドのあとのオプションはそれぞれ

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;/b&lt;/code&gt; : ファイル名だけ表示&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/s&lt;/code&gt; : サブツリーも検索&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;改行&#34;&gt;改行&lt;/h3&gt;

&lt;p&gt;shellscriptではバックスラッシュ &lt;code&gt;\&lt;/code&gt; で改行するけど、batch scriptではハット &lt;code&gt;^&lt;/code&gt; でやる。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>