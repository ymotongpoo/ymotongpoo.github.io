<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Log on depository</title>
    <link>https://ymotongpoo.github.io/tags/log/index.xml</link>
    <description>Recent content in Log on depository</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <atom:link href="https://ymotongpoo.github.io/tags/log/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>wercker使うのをあきらめた（けど、頑張ったらできた）</title>
      <link>https://ymotongpoo.github.io/diary/no-more-wercker/</link>
      <pubDate>Mon, 09 Jan 2017 01:40:22 +0900</pubDate>
      
      <guid>https://ymotongpoo.github.io/diary/no-more-wercker/</guid>
      <description>

&lt;h2 id=&#34;ciでgithub-pagesの更新をしようと思った&#34;&gt;CIでGitHub pagesの更新をしようと思った&lt;/h2&gt;

&lt;p&gt;このサイトの更新をGitHubに&lt;code&gt;source&lt;/code&gt;ブランチからpushしただけでできるようにしようと思って、werckerでやろうと画策したんだけどどうやっても動かない。試したのは次のような感じ。&lt;/p&gt;

&lt;h2 id=&#34;personal-access-tokenを使っての方法&#34;&gt;Personal access tokenを使っての方法&lt;/h2&gt;

&lt;p&gt;Personal access tokenを使えばGitHubへのアクセスがかなり制限できるし、いざとなったらトークンを消せばいいだけなので、まずはそれでやろうと思い立った。&lt;/p&gt;

&lt;p&gt;Personal access tokenをwerckerみたいに毎回初期化される環境でやるには、&lt;code&gt;.netrc&lt;/code&gt;に次のように書いておけばいいと思ってやってみた。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;machine github.com
login ymotongpoo
password xxxxx
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;しかしどうもwerckerはpushの際にはSSHプロトコルを使っているようで次のようなエラーではじかれた。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Host key verification failed.
fatal: Could not read from remote repository.

Please make sure you have the correct access rights
and the repository exists.
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;ssh認証を使う方法&#34;&gt;SSH認証を使う方法&lt;/h2&gt;

&lt;h3 id=&#34;自分でssh鍵を生成する場合&#34;&gt;自分でSSH鍵を生成する場合&lt;/h3&gt;

&lt;p&gt;自分のLinuxマシンで &lt;code&gt;ssh-keygen&lt;/code&gt; で生成した公開鍵をGitHubのSSH鍵設定のところに登録し、秘密鍵をwerckerのpipelineの環境変数部分に登録。（名前は &lt;code&gt;MYPACKAGE_KEY_PRIVATE&lt;/code&gt;）とした。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;wercker.yml&lt;/code&gt; で &lt;code&gt;steps&lt;/code&gt; に &lt;code&gt;add-ssh-key&lt;/code&gt; を登録してみたもののやっぱり先と同様に失敗。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://devcenter.wercker.com/docs/ssh-keys/using-ssh-keys&#34;&gt;Using SSH Keys&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;werckerでssh鍵を生成する場合&#34;&gt;werckerでSSH鍵を生成する場合&lt;/h3&gt;

&lt;p&gt;先のリンクに並んでSSH鍵をwercker側で設定する方法があったので、それも設定してみた。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://devcenter.wercker.com/docs/ssh-keys/generating-ssh-keys&#34;&gt;Generating SSH Keys&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;これで生成しても同様のエラーではじかれる。&lt;/p&gt;

&lt;h3 id=&#34;上記の方法をdeploy-keyで試す場合&#34;&gt;上記の方法をdeploy keyで試す場合&lt;/h3&gt;

&lt;p&gt;公開鍵をGitHubのdeploy keyとして登録し、write accessを与えてみたもののやはり失敗した。&lt;/p&gt;

&lt;h2 id=&#34;結論&#34;&gt;結論&lt;/h2&gt;

&lt;p&gt;別のCI使おう&amp;hellip;&lt;/p&gt;

&lt;h2 id=&#34;つづき&#34;&gt;つづき&lt;/h2&gt;

&lt;p&gt;癪なのでもう一度よく設定を調べてみたら次のページを見つけた。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://devcenter.wercker.com/docs/git/submodules&#34;&gt;Using Git Submodules&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;pushをする方法じゃないけれど、ここにSSH鍵の登録にホストを設定する方法とfingerprintの登録をする手順が書いてあった。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    - add-ssh-key:
        keyname: KEY_NAME
        host: github.com
    - add-to-known_hosts:
        hostname: github.com
        fingerprint: 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これに則って、fingerprintを登録した。ただこれをコピペしただけではだめで、自分のdocker imageのOpenSSHが新しいのでSHA256のfingerprintが必要だった。&lt;/p&gt;

&lt;p&gt;調べてみたら、GitHubのほうにSHA256のfingerprintも書いてあった。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://help.github.com/articles/what-are-github-s-ssh-key-fingerprints/&#34;&gt;What are GitHub&amp;rsquo;s SSH key fingerprints?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;というわけで次のように変更してみたら無事にpushできた。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    - add-ssh-key:
        keyname: MYPACKAGE_KEY
        host: github.com
    - add-to-known_hosts:
        hostname: github.com
        fingerprint: SHA256:nThbg6kXUpJWGl7E1IGOCspRomTxdCARLviKw6E5SY8
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;おまけ&#34;&gt;おまけ&lt;/h2&gt;

&lt;p&gt;werckerのbuildのpipelineで全部書いていたので、&lt;code&gt;source&lt;/code&gt;ブランチのビルドが終わって&lt;code&gt;master&lt;/code&gt;にpushすると、今度はそれをトリガーにしてまたpipelineが始まってしまう。以前はあったように思うのだけど、最初のpipelineを起動するブランチは指定できないみたいなので、ワークアラウンドとして&lt;code&gt;master&lt;/code&gt;ブランチに&lt;code&gt;wercker.yml&lt;/code&gt;を置いて、ただ&lt;code&gt;echo&lt;/code&gt;させるだけにして、pipeline自体が異常終了しないようにした。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>仕事始めとWindows 10の開発環境の公開</title>
      <link>https://ymotongpoo.github.io/diary/windows10/</link>
      <pubDate>Thu, 05 Jan 2017 22:42:37 +0900</pubDate>
      
      <guid>https://ymotongpoo.github.io/diary/windows10/</guid>
      <description>

&lt;h2 id=&#34;仕事始め&#34;&gt;仕事始め&lt;/h2&gt;

&lt;p&gt;今日は仕事始めだった。メールのスレッドが100以上未読だったうえに、ちょくちょく来てたメールにスターをつけて「後でやる」化してたので、合計で150以上のスレッドをさばいた計算になる。&lt;/p&gt;

&lt;p&gt;今日は例外だったかもしれないけれど、年末年始にコードばかり書いてたときは集中できてたなあと思う。やっぱりこういう仕事の合間にどれだけコード書けるかが今年の課題になりそうだなあ。&lt;/p&gt;

&lt;h2 id=&#34;windows-10の開発環境を公開した&#34;&gt;Windows 10の開発環境を公開した&lt;/h2&gt;

&lt;p&gt;年末年始に実家に帰ったときにXPS 13の開発環境を整えた作業ログをブログで公開したら思った以上に反響がきてた。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://ymotongpoo.hatenablog.com/entry/2017/01/05/101233&#34;&gt;Windows 10の開発環境を整えた&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;はてブの数の割にコメントがみんなマイルドなものだったのが意外だった。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>クリスマスイブとか</title>
      <link>https://ymotongpoo.github.io/diary/christmas-eve/</link>
      <pubDate>Sat, 24 Dec 2016 11:07:17 +0900</pubDate>
      
      <guid>https://ymotongpoo.github.io/diary/christmas-eve/</guid>
      <description>

&lt;h2 id=&#34;クリスマスイブの予定&#34;&gt;クリスマスイブの予定&lt;/h2&gt;

&lt;p&gt;特に特別なことはなくて、今日は大掃除でもできればいいなという感じ。家がだいぶ散らかってきたので今やっとかないと来年とかひどいことになりそう。&lt;/p&gt;

&lt;p&gt;とりあえず風呂掃除用のブラシが折れたので新しく買って、あとは風呂場のカビ退治用のスプレーを購入。1時間半ほど格闘して風呂場、洗面台、コンロまわりなどの汚れを一掃した。やはり掃除はきれいになったあとを見ると楽しい。&lt;/p&gt;

&lt;p&gt;一通り重労働な場所は終わったので、書類ケースに入っていたいらない書類などを整理して捨てた。&lt;/p&gt;

&lt;h2 id=&#34;vsc-licenserの更新&#34;&gt;vsc-licenserの更新&lt;/h2&gt;

&lt;p&gt;昨日は対応言語を増やしたので、今日は対応ライセンスを増やした。BSDの3条項ライセンスと2条項ライセンスの新旧の認識が間違ってたので、&lt;code&gt;BSD&lt;/code&gt;という設定はやめて、&lt;code&gt;BSD2&lt;/code&gt;と&lt;code&gt;BSD3&lt;/code&gt;にした。この対応で破壊的変更が入った。あとはCCの追加かなあ。&lt;/p&gt;

&lt;p&gt;また1行コメントと複数行コメントのどちらを優先して使用するかのオプションも追加した。これでとりあえずの変更はおしまい。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>低温調理の会とか</title>
      <link>https://ymotongpoo.github.io/diary/anova-party/</link>
      <pubDate>Fri, 23 Dec 2016 08:42:44 +0900</pubDate>
      
      <guid>https://ymotongpoo.github.io/diary/anova-party/</guid>
      <description>

&lt;h2 id=&#34;低温調理の会&#34;&gt;低温調理の会&lt;/h2&gt;

&lt;p&gt;@adamrocker と @atusi とAnovaを使って低温調理の会をした。大量の肉をAnovaでやっていくのはとても良い。自宅でもたまには塊肉を複数浮かべた絵を見たい。グラスフェッドの肉は50℃で長くやっていくと仕上げたときにふわふわの&lt;/p&gt;

&lt;h2 id=&#34;vsc-licenserの更新&#34;&gt;vsc-licenserの更新&lt;/h2&gt;

&lt;p&gt;Visual Studio Code Advent Calendar 2016に&lt;a href=&#34;http://ymotongpoo.hatenablog.com/entry/2016/12/21/164554&#34;&gt;投稿した&lt;/a&gt;ので、久々に &lt;a href=&#34;https://github.com/ymotongpoo/vsc-licenser&#34;&gt;vsc-licenser&lt;/a&gt;を更新しようかなと思い始めた。手始めに、コメントを1行コメントと複数行コメントの両方でできるようにしようと思う。&lt;/p&gt;

&lt;p&gt;まずはバージョン0.3.0として、これまでマップで対応していたコメント記法の情報を専用クラスを作って1行コメントと複数行コメントの両方を保持できるようにしたので、今後設定で好みのスタイルで出来るようになっている。&lt;/p&gt;

&lt;p&gt;そのついでで、対応言語の数を増やしたので、次は対応ライセンスの数を増やしたい。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>