<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>depository</title>
    <link>https://ymotongpoo.github.io/index.xml</link>
    <description>Recent content on depository</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Mon, 13 Feb 2017 01:25:00 +0900</lastBuildDate>
    <atom:link href="https://ymotongpoo.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>家のルータをDD-WRTに変更した</title>
      <link>https://ymotongpoo.github.io/diary/2017/02/13/dd-wrt/</link>
      <pubDate>Mon, 13 Feb 2017 01:25:00 +0900</pubDate>
      
      <guid>https://ymotongpoo.github.io/diary/2017/02/13/dd-wrt/</guid>
      <description>

&lt;h2 id=&#34;dd-wrtに変更した&#34;&gt;DD-WRTに変更した&lt;/h2&gt;

&lt;p&gt;どうもOCNから提供されているルータ兼終端機器の調子が悪いので、終端機器側の無線LAN機能を使うのを止めて、だいぶ前に使わなくなって放置されていたWZR-HP-AG300HをDD-WRTにした。&lt;/p&gt;

&lt;p&gt;設定を頻繁に変えていて、安定しない時間が少しあったが（例：設定したSSIDに接続できない）、しばらくして無事安定して接続できるようになったので、無線LAN経由で接続していた端末の設定をすべて変えた。Chromecastなども安定して接続できているし、PCもだいぶ快適に繋がっている。&lt;/p&gt;

&lt;p&gt;まだ解決できていない点としては、上位のネットワークでavahi-daemonで吐いているホスト名を参照できていないので、その辺をどうにかしたい。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>AndroidのActivityを終了させる</title>
      <link>https://ymotongpoo.github.io/tech/2017/01/27/finish-android-activity/</link>
      <pubDate>Fri, 27 Jan 2017 15:34:45 +0900</pubDate>
      
      <guid>https://ymotongpoo.github.io/tech/2017/01/27/finish-android-activity/</guid>
      <description>

&lt;h2 id=&#34;activityを終了させる&#34;&gt;Activityを終了させる&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.android.com/reference/android/support/v7/app/AppCompatActivity.html&#34;&gt;android.support.v7.app.AppCompatActivity &amp;ndash; DAC&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/okaxaki/items/f3a4a4ab0616ac2f68ed&#34;&gt;Activity#finish() でアプリが終了できないときは &amp;ndash; Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;最後のActivityで &lt;code&gt;Activity#finish()&lt;/code&gt; してもタスクが終わらないことがあるので、ちゃんと &lt;code&gt;Activity#finishAndRemoveTask()&lt;/code&gt; を呼ぶこと。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;void finishAndRemoveTask()
Call this when your activity is done and should be closed and the task should be completely removed as a part of finishing the root activity of the task.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;loaderについて&#34;&gt;Loaderについて&lt;/h2&gt;

&lt;p&gt;ActivityのライフサイクルとAsyncTaskとの分離がLoaderによって可能になった。（&lt;code&gt;AsyncTaskLoader&lt;/code&gt; とか &lt;code&gt;CursorLoader&lt;/code&gt;）&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/KeithYokoma/items/03420e791548153c0811&#34;&gt;Loaderについて知っておいたほうが良いこと３つ &amp;ndash; Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.android.com/guide/components/loaders.html?hl=ja&#34;&gt;Loader &amp;ndash; DAC&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;fragmentを作るとき&#34;&gt;Fragmentを作るとき&lt;/h2&gt;

&lt;p&gt;いらんものをいっぱい作るのでチェックはぜんぶはずそう。（これではまった）&lt;/p&gt;

&lt;figure&gt;
  &lt;amp-img src=&#34;https://ymotongpoo.github.io/img/2017-01-27-001.png&#34; alt=&#34;AndroidのActivityを終了させる img/2017-01-27-001.png&#34; width=547px height=470px layout=&gt;&lt;/amp-img&gt;
  
&lt;/figure&gt;

</description>
    </item>
    
    <item>
      <title>bintrayが腐ってる</title>
      <link>https://ymotongpoo.github.io/diary/2017/01/24/bintray-is-not-working-correctly/</link>
      <pubDate>Tue, 24 Jan 2017 23:40:00 +0900</pubDate>
      
      <guid>https://ymotongpoo.github.io/diary/2017/01/24/bintray-is-not-working-correctly/</guid>
      <description>

&lt;h2 id=&#34;gitlab-ciでdebパッケージをbintrayに上げたいが&#34;&gt;GitLab CIでdebパッケージをbintrayに上げたいが&lt;/h2&gt;

&lt;p&gt;ここしばらくdocker imageを作って遊んでるんだけど、GoのNightly Buildをして公開しようと思ってbintrayにアップロードしようとしている。
しかしながら、どうもバイナリファイルだけアップロードできなくて、 @mopemope にも聞いてみたが同様のことが起きているようだ。&lt;/p&gt;

&lt;p&gt;実際にやっていることは単純で &lt;code&gt;curl&lt;/code&gt; でこういうコマンドを叩いているだけ。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ curl -T golang-nightly_${BUILD_VER}_amd64.deb -uymotongpoo:${BINTRAY_API_KEY} https://api.bintray.com/content/ymotongpoo/deb/golang/${BUILD_VER}/golang-nightly_${BUILD_VER}_amd64.deb;deb_distribution=jessie;deb_component=main;deb_architecture=amd64;publish=1;override=1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;しかし次のようなエラーが出ている。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{&amp;quot;message&amp;quot;:&amp;quot;Unable to upload files: Debian distribution, component and architecture were not found on repo and were not specified&amp;quot;}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;指定しているdistribution, component, architectureいずれも正しいんだけどなあ。bintrayに空のパスだけが作成されて終了してしまう。&lt;/p&gt;

&lt;p&gt;とりあえず逃げ道として &lt;a href=&#34;https://packagecloud.io/&#34;&gt;packagecloud.io&lt;/a&gt; にレポジトリを作ってみた。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Udemy Day2</title>
      <link>https://ymotongpoo.github.io/diary/2017/01/16/udemy-day2/</link>
      <pubDate>Mon, 16 Jan 2017 14:59:46 +0900</pubDate>
      
      <guid>https://ymotongpoo.github.io/diary/2017/01/16/udemy-day2/</guid>
      <description>

&lt;h2 id=&#34;section-4-5&#34;&gt;Section 4-5&lt;/h2&gt;

&lt;p&gt;データから特徴量にしないと機械学習できませんよという話。
文字列や画像をどのように特徴量ベクトルに変換できるか。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.gutenberg.org/&#34;&gt;Project Gutenberg&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;lecture-41-53&#34;&gt;Lecture 41-53&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;データ取得&lt;/li&gt;
&lt;li&gt;特徴量抽出&lt;/li&gt;
&lt;li&gt;特徴選択&lt;/li&gt;
&lt;li&gt;正規化&lt;/li&gt;
&lt;li&gt;識別&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;欠損値、外れ値などは前処理として自分で頑張って取り除くか加工をしなければいけない。&lt;/p&gt;

&lt;p&gt;欠損値の場合&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;取り除く&lt;/li&gt;
&lt;li&gt;平均値で埋める(&lt;code&gt;Imputer&lt;/code&gt;)。このときの対応として、外れ値を先に外しておくか、中央値を使う。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;また次元の削減に主成分分析を使うことができる。主成分を寄与率順にいくつか選択することだけで予測率を残したまま次元数を少なくできる。&lt;/p&gt;

&lt;p&gt;とりあえず何かしらの次元変換をする流れは線形・非線形によらず&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;変換モデルを用意する&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fit()&lt;/code&gt; する&lt;/li&gt;
&lt;li&gt;&lt;code&gt;transform()&lt;/code&gt; する&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;という手順になる。非線形変換で次数を増やすときは最後の手段にしよう。&lt;/p&gt;

&lt;p&gt;標準化、正規化は次元削減よりもなによりも大事なので絶対にやろう。&lt;/p&gt;

&lt;p&gt;ZCA白色化はDeep Learningなどによく使われる。&lt;/p&gt;

&lt;h2 id=&#34;secition-6&#34;&gt;Secition 6&lt;/h2&gt;

&lt;h3 id=&#34;lecture-54-61&#34;&gt;Lecture 54-61&lt;/h3&gt;

&lt;p&gt;2クラス問題であればconfusion matrixを作って、本当に予測が間違っていたらまずいものの個数を見極める。
さらに SciKit Learn には &lt;code&gt;classification_report&lt;/code&gt; という便利なものがある。&lt;/p&gt;

&lt;p&gt;検出したい値のrecallが大事。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;precision_recall_fscore_support&lt;/code&gt; がすごく便利っぽい。&lt;/p&gt;

&lt;p&gt;多クラス問題でも &lt;code&gt;classification_report&lt;/code&gt; の値を元にどのクラスの認識率が悪いか判断できる。&lt;/p&gt;

&lt;h3 id=&#34;キーワード&#34;&gt;キーワード&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;χ二乗検定&lt;/li&gt;
&lt;li&gt;主成分分析 (PCA)&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>DockerでJupyter Notebookの環境を作り始めた</title>
      <link>https://ymotongpoo.github.io/diary/2017/01/15/docker-jupyter/</link>
      <pubDate>Sun, 15 Jan 2017 23:49:28 +0900</pubDate>
      
      <guid>https://ymotongpoo.github.io/diary/2017/01/15/docker-jupyter/</guid>
      <description>

&lt;h2 id=&#34;dockerでjupyter-notebookの環境を作り始めた&#34;&gt;DockerでJupyter Notebookの環境を作り始めた&lt;/h2&gt;

&lt;p&gt;Scikit Learnを使って機械学習の勉強をし始めたんだけれども、どうせならDocker Imageを使おうかと思った。見てみたら、公式で配布しているものは&lt;a href=&#34;https://github.com/jupyter/docker-stacks/blob/master/base-notebook/Dockerfile#L59-L73&#34;&gt;Anacondaを使っている&lt;/a&gt;ので正直気に食わない。&lt;/p&gt;

&lt;p&gt;ということでAlpine Linuxを使って最小構成のDocker Imageを自前で作り始めた。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/ymotongpoo/dockerfiles/blob/master/jupyter-notebook/Dockerfile.jupyter-alpine&#34;&gt;Dockerfile.jupyter-alpine&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;AlpineにはBLASとLAPACKのパッケージがないので自前ビルドする必要があり、そこでちょっとはまった。&lt;/p&gt;

&lt;h2 id=&#34;婚約指輪を受け取りに行った&#34;&gt;婚約指輪を受け取りに行った&lt;/h2&gt;

&lt;p&gt;昨年末に取り寄せ注文した婚約指輪を今日受け取りに行った。こんな機会でもなければ絶対に買わないようなものなので、なかなかの体験をした。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Udemy Day1</title>
      <link>https://ymotongpoo.github.io/diary/2017/01/12/udemy-day1/</link>
      <pubDate>Thu, 12 Jan 2017 14:04:30 +0900</pubDate>
      
      <guid>https://ymotongpoo.github.io/diary/2017/01/12/udemy-day1/</guid>
      <description>

&lt;h2 id=&#34;section-3&#34;&gt;Section 3&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/playlist?list=PLDVKrmVEl_Wt0WoaQqDfRVt9EK1lQjZu5&#34;&gt;YouTubeのscikit-learnチュートリアル集（英語）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/playlist?list=PLQVvvaa0QuDfKTOs3Keq_kaG2P55YRn5v&#34;&gt;Machine Learning with Python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.kamishima.net/mlmpyja/&#34;&gt;機械学習の Python との出会い Machine Learning Meets Python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.slideshare.net/yasutomo57jp/pythondeep-learning-60544586&#34;&gt;Pythonによる機械学習入門〜基礎からDeep Learningまで〜（電子情報通信学会総合大会2016）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.slideshare.net/yasutomo57jp/python-svmdeep-learning&#34;&gt;Pythonによる機械学習入門 ～SVMからDeep Learningまで～（SSII2016）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4844380605/&#34;&gt;Python機械学習プログラミング 達人データサイエンティストによる理論と実践, インプレス, 2016&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4873116988/&#34;&gt;実践 機械学習システム, オライリージャパン, 2014&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;lecture-29-33&#34;&gt;Lecture 29-33&lt;/h2&gt;

&lt;h3 id=&#34;scikit-learnでの大まかな手順&#34;&gt;scikit-learnでの大まかな手順&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;データセットを用意する&lt;/li&gt;
&lt;li&gt;学習用とテスト用にデータセットを分ける&lt;/li&gt;
&lt;li&gt;識別器を用意する&lt;/li&gt;
&lt;li&gt;学習させる&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;データセットを分ける場合はランダムに分けるように気をつけて。また分割を何度も行って、正解率の平均と標準偏差を出しておこう。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Cross Validation (交差確認)

&lt;ul&gt;
&lt;li&gt;K-fold CV (K=3, 5, 10)&lt;/li&gt;
&lt;li&gt;Leave one out&lt;/li&gt;
&lt;li&gt;Leave group out&lt;/li&gt;
&lt;li&gt;Hold out&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Stratified (層化)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;識別器はScikit Learnにいろいろプリセットで用意されていて楽ちん。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from sklearn import linear_model
cls = linear_model.LogisticRegression()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;学習させるのは識別器の &lt;code&gt;fit()&lt;/code&gt; メソッドを使うだけ。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;cls.fit(x_train, y_train)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;サンプル数によってやり方が変わってくる。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;N ~ 10 : 機械学習する意味ない&lt;/li&gt;
&lt;li&gt;N ~ 100 : Leave one out CVで可能かも。でもデータは増やしたい。&lt;/li&gt;
&lt;li&gt;N ~ 1000 : まともになってくる。10-fold CVで可能。&lt;/li&gt;
&lt;li&gt;N ~ 10000 : 良い性能が期待できる。K-fold CV (K &amp;lt; 10)&lt;/li&gt;
&lt;li&gt;N ~ 100000 : 実応用。Hold-out以外は無理。かなり工夫が必要。&lt;/li&gt;
&lt;li&gt;N &amp;gt; 100000 : 最先端&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;キーワードを拾っていく&#34;&gt;キーワードを拾っていく&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;ロジスティクス回帰&lt;/li&gt;
&lt;li&gt;Cross Validation&lt;/li&gt;
&lt;li&gt;Hold out&lt;/li&gt;
&lt;li&gt;Stratified&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Jupyter Notebookのインストール</title>
      <link>https://ymotongpoo.github.io/tech/2017/01/12/installing-jupyter-notebook/</link>
      <pubDate>Thu, 12 Jan 2017 13:45:26 +0900</pubDate>
      
      <guid>https://ymotongpoo.github.io/tech/2017/01/12/installing-jupyter-notebook/</guid>
      <description>

&lt;h2 id=&#34;jupyter-notebookのインストール&#34;&gt;Jupyter Notebookのインストール&lt;/h2&gt;

&lt;p&gt;いい感じにipythonをブラウザ上で使ったりして、履歴も保存できたりする便利なやつ。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-zsh&#34;&gt;% python3 -m venv jupyter
% cd jupyter
% pip3 install jupyter numpy scipy scikit-learn pandas
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これで問題なくインストールできた。楽。&lt;/p&gt;

&lt;h2 id=&#34;jupyter-notebookの起動&#34;&gt;Jupyter Notebookの起動&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-zsh&#34;&gt;% jupyter notebook
[I 11:29:00.155 NotebookApp] Serving notebooks from local directory:
/usr/local/google/home/yoshifumi/src/projects/jupyter
[I 11:29:00.155 NotebookApp] 0 active kernels
[I 11:29:00.155 NotebookApp] The Jupyter Notebook is running at:
http://localhost:8888/?token=3472f8ea9c4afb02dcba5d04bf417edc9f744448c847aece
[I 11:29:00.155 NotebookApp] Use Control-C to stop this server and shut down all kernels (twice to skip confirmation).
[W 11:29:00.156 NotebookApp] No web browser found: could not locate runnable browser.
[C 11:29:00.156 NotebookApp]

     Copy/paste this URL into your browser when you connect for the first time,
     to login with a token:
         http://localhost:8888/?token=3472f8ea9c4afb02dcba5d04bf417edc9f744448c847aece

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これで立ち上がってるのでログの下部に書いてあるURLにアクセスする。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Python3.6をLinuxにインストールした</title>
      <link>https://ymotongpoo.github.io/tech/2017/01/11/installing-python3.6-on-linux/</link>
      <pubDate>Wed, 11 Jan 2017 13:51:58 +0900</pubDate>
      
      <guid>https://ymotongpoo.github.io/tech/2017/01/11/installing-python3.6-on-linux/</guid>
      <description>

&lt;h2 id=&#34;python3-6のダウンロード&#34;&gt;Python3.6のダウンロード&lt;/h2&gt;

&lt;p&gt;公式サイトからtar.gzをダウンロードして展開。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-zsh&#34;&gt;% sudo mkdir /opt/python
% sudo chown ymotongpoo /opt/python
% mv ~/Download/Python-3.6.0.tgz /opt/python
% cd /opt/python/
% tar xzf Python-3.6.0.tgz
% cd Python-3.6.0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;必要なパッケージをインストールしておく。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-zsh&#34;&gt;% sudo apt-get install zlib1g-dev bzip2 libbz2-dev libreadline6-dev libjpeg62 \
libjpeg62-dev libsqlite3-0 libsqlite3-dev libgdbm3 libgdbm-dev libssl1.0.0 \
libssl-dev tk8.6-dev 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Pythonのconfigureはこんな感じ。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-zsh&#34;&gt;% ./configure --prefix=/opt/python/3.6.0 \
              --with-threads \
              --with-computed-gotos \
              --enable-optimizations \
              --enable-ipv6 \
              --with-system-expat \
              --with-dbmliborder=gdbm:ndbm \
              --with-system-ffi \
              --with-system-libmpdec \
              --enable-loadable-sqlite-extensions
% make &amp;amp;&amp;amp; make install
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;インストールできたかのテスト&#34;&gt;インストールできたかのテスト&lt;/h2&gt;

&lt;p&gt;実際にPython3のコマンドを叩いてみるだけの簡単なテスト。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-zsh&#34;&gt;% which python3
/opt/python/3.6.0/bin/python3
% python3
Error in sitecustomize; set PYTHONVERBOSE for traceback:
ModuleNotFoundError: No module named &#39;__builtin__&#39;
Python 3.6.0 (default, Jan 11 2017, 17:46:21)
[GCC 4.8.4] on linux
Type &amp;quot;help&amp;quot;, &amp;quot;copyright&amp;quot;, &amp;quot;credits&amp;quot; or &amp;quot;license&amp;quot; for more information.
&amp;gt;&amp;gt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;あれ、なんかエラーでてる。よく見てみたら &lt;code&gt;PYTHONPATH&lt;/code&gt; に変な値が入ってる。
しかしこれはインストール先の環境では勝手に変更したらいけないものなので困った。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-zsh&#34;&gt;% python3 -E
Python 3.6.0 (default, Jan 11 2017, 17:46:21)
[GCC 4.8.4] on linux
Type &amp;quot;help&amp;quot;, &amp;quot;copyright&amp;quot;, &amp;quot;credits&amp;quot; or &amp;quot;license&amp;quot; for more information.
&amp;gt;&amp;gt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;確かに &lt;code&gt;PYTHONPATH&lt;/code&gt; なしで起動したら問題なくできた。&lt;/p&gt;

&lt;h2 id=&#34;しかたなくworkaround&#34;&gt;しかたなくworkaround&lt;/h2&gt;

&lt;p&gt;仕方ないので、 &lt;code&gt;venv&lt;/code&gt; で環境を作った後、 &lt;code&gt;activate&lt;/code&gt; スクリプトでいじることにした。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-zsh&#34;&gt;% python3 -E -m venv jupyter
% cd jupyter
% vim bin/activate  # この中でほかの環境変数と同様にPYTHONPATHをいじる設定を書いた
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これでうまくいった。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>My Wedding Fair</title>
      <link>https://ymotongpoo.github.io/diary/2017/01/09/wedding-fair/</link>
      <pubDate>Mon, 09 Jan 2017 23:25:34 +0900</pubDate>
      
      <guid>https://ymotongpoo.github.io/diary/2017/01/09/wedding-fair/</guid>
      <description>

&lt;h2 id=&#34;werckerのバグを直した&#34;&gt;werckerのバグを直した&lt;/h2&gt;

&lt;p&gt;結局うまくいかなかった原因はSSHのfingerprintを登録してなかったことが原因だった。これはブログのほうにもまとめておこう。&lt;/p&gt;

&lt;h2 id=&#34;my-wedding-fairに参加した&#34;&gt;My Wedding Fairに参加した&lt;/h2&gt;

&lt;p&gt;結婚式場が開催する説明会に参加してきた。大量の書類をもらって帰ってきた。1回目の打ち合わせまでにやることが大量にあるので、それまでに早めに準備をしておこうと思う。まずはスプレッドシートに必要な項目を全部書き写すところからかな。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>wercker使うのをあきらめた（けど、頑張ったらできた）</title>
      <link>https://ymotongpoo.github.io/tech/2017/01/09/no-more-wercker/</link>
      <pubDate>Mon, 09 Jan 2017 01:40:22 +0900</pubDate>
      
      <guid>https://ymotongpoo.github.io/tech/2017/01/09/no-more-wercker/</guid>
      <description>

&lt;h2 id=&#34;ciでgithub-pagesの更新をしようと思った&#34;&gt;CIでGitHub pagesの更新をしようと思った&lt;/h2&gt;

&lt;p&gt;このサイトの更新をGitHubに&lt;code&gt;source&lt;/code&gt;ブランチからpushしただけでできるようにしようと思って、werckerでやろうと画策したんだけどどうやっても動かない。試したのは次のような感じ。&lt;/p&gt;

&lt;h2 id=&#34;personal-access-tokenを使っての方法&#34;&gt;Personal access tokenを使っての方法&lt;/h2&gt;

&lt;p&gt;Personal access tokenを使えばGitHubへのアクセスがかなり制限できるし、いざとなったらトークンを消せばいいだけなので、まずはそれでやろうと思い立った。&lt;/p&gt;

&lt;p&gt;Personal access tokenをwerckerみたいに毎回初期化される環境でやるには、&lt;code&gt;.netrc&lt;/code&gt;に次のように書いておけばいいと思ってやってみた。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;machine github.com
login ymotongpoo
password xxxxx
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;しかしどうもwerckerはpushの際にはSSHプロトコルを使っているようで次のようなエラーではじかれた。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Host key verification failed.
fatal: Could not read from remote repository.

Please make sure you have the correct access rights
and the repository exists.
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;ssh認証を使う方法&#34;&gt;SSH認証を使う方法&lt;/h2&gt;

&lt;h3 id=&#34;自分でssh鍵を生成する場合&#34;&gt;自分でSSH鍵を生成する場合&lt;/h3&gt;

&lt;p&gt;自分のLinuxマシンで &lt;code&gt;ssh-keygen&lt;/code&gt; で生成した公開鍵をGitHubのSSH鍵設定のところに登録し、秘密鍵をwerckerのpipelineの環境変数部分に登録。（名前は &lt;code&gt;MYPACKAGE_KEY_PRIVATE&lt;/code&gt;）とした。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;wercker.yml&lt;/code&gt; で &lt;code&gt;steps&lt;/code&gt; に &lt;code&gt;add-ssh-key&lt;/code&gt; を登録してみたもののやっぱり先と同様に失敗。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://devcenter.wercker.com/docs/ssh-keys/using-ssh-keys&#34;&gt;Using SSH Keys&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;werckerでssh鍵を生成する場合&#34;&gt;werckerでSSH鍵を生成する場合&lt;/h3&gt;

&lt;p&gt;先のリンクに並んでSSH鍵をwercker側で設定する方法があったので、それも設定してみた。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://devcenter.wercker.com/docs/ssh-keys/generating-ssh-keys&#34;&gt;Generating SSH Keys&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;これで生成しても同様のエラーではじかれる。&lt;/p&gt;

&lt;h3 id=&#34;上記の方法をdeploy-keyで試す場合&#34;&gt;上記の方法をdeploy keyで試す場合&lt;/h3&gt;

&lt;p&gt;公開鍵をGitHubのdeploy keyとして登録し、write accessを与えてみたもののやはり失敗した。&lt;/p&gt;

&lt;h2 id=&#34;結論&#34;&gt;結論&lt;/h2&gt;

&lt;p&gt;別のCI使おう&amp;hellip;&lt;/p&gt;

&lt;h2 id=&#34;つづき&#34;&gt;つづき&lt;/h2&gt;

&lt;p&gt;癪なのでもう一度よく設定を調べてみたら次のページを見つけた。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://devcenter.wercker.com/docs/git/submodules&#34;&gt;Using Git Submodules&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;pushをする方法じゃないけれど、ここにSSH鍵の登録にホストを設定する方法とfingerprintの登録をする手順が書いてあった。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    - add-ssh-key:
        keyname: KEY_NAME
        host: github.com
    - add-to-known_hosts:
        hostname: github.com
        fingerprint: 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これに則って、fingerprintを登録した。ただこれをコピペしただけではだめで、自分のdocker imageのOpenSSHが新しいのでSHA256のfingerprintが必要だった。&lt;/p&gt;

&lt;p&gt;調べてみたら、GitHubのほうにSHA256のfingerprintも書いてあった。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://help.github.com/articles/what-are-github-s-ssh-key-fingerprints/&#34;&gt;What are GitHub&amp;rsquo;s SSH key fingerprints?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;というわけで次のように変更してみたら無事にpushできた。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    - add-ssh-key:
        keyname: MYPACKAGE_KEY
        host: github.com
    - add-to-known_hosts:
        hostname: github.com
        fingerprint: SHA256:nThbg6kXUpJWGl7E1IGOCspRomTxdCARLviKw6E5SY8
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;おまけ&#34;&gt;おまけ&lt;/h2&gt;

&lt;p&gt;werckerのbuildのpipelineで全部書いていたので、&lt;code&gt;source&lt;/code&gt;ブランチのビルドが終わって&lt;code&gt;master&lt;/code&gt;にpushすると、今度はそれをトリガーにしてまたpipelineが始まってしまう。以前はあったように思うのだけど、最初のpipelineを起動するブランチは指定できないみたいなので、ワークアラウンドとして&lt;code&gt;master&lt;/code&gt;ブランチに&lt;code&gt;wercker.yml&lt;/code&gt;を置いて、ただ&lt;code&gt;echo&lt;/code&gt;させるだけにして、pipeline自体が異常終了しないようにした。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>仕事始めとWindows 10の開発環境の公開</title>
      <link>https://ymotongpoo.github.io/diary/2017/01/05/windows10/</link>
      <pubDate>Thu, 05 Jan 2017 22:42:37 +0900</pubDate>
      
      <guid>https://ymotongpoo.github.io/diary/2017/01/05/windows10/</guid>
      <description>

&lt;h2 id=&#34;仕事始め&#34;&gt;仕事始め&lt;/h2&gt;

&lt;p&gt;今日は仕事始めだった。メールのスレッドが100以上未読だったうえに、ちょくちょく来てたメールにスターをつけて「後でやる」化してたので、合計で150以上のスレッドをさばいた計算になる。&lt;/p&gt;

&lt;p&gt;今日は例外だったかもしれないけれど、年末年始にコードばかり書いてたときは集中できてたなあと思う。やっぱりこういう仕事の合間にどれだけコード書けるかが今年の課題になりそうだなあ。&lt;/p&gt;

&lt;h2 id=&#34;windows-10の開発環境を公開した&#34;&gt;Windows 10の開発環境を公開した&lt;/h2&gt;

&lt;p&gt;年末年始に実家に帰ったときにXPS 13の開発環境を整えた作業ログをブログで公開したら思った以上に反響がきてた。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://ymotongpoo.hatenablog.com/entry/2017/01/05/101233&#34;&gt;Windows 10の開発環境を整えた&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;はてブの数の割にコメントがみんなマイルドなものだったのが意外だった。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>箱根を見てvsc-licenserを更新して映画を見た</title>
      <link>https://ymotongpoo.github.io/diary/2017/01/03/rogue-one/</link>
      <pubDate>Tue, 03 Jan 2017 23:16:44 +0900</pubDate>
      
      <guid>https://ymotongpoo.github.io/diary/2017/01/03/rogue-one/</guid>
      <description>

&lt;h2 id=&#34;箱根駅伝を見た&#34;&gt;箱根駅伝を見た&lt;/h2&gt;

&lt;p&gt;今年も青山学院大学が優勝して、三連覇した。むちゃくちゃ早くて、今年も復路で繰り上げスタートが起きてしまった。&lt;/p&gt;

&lt;p&gt;山梨学院大学もついに繰り上げスタートになり、来年は予選会からスタート。頑張ってほしい。&lt;/p&gt;

&lt;h2 id=&#34;vsc-licenserを更新した&#34;&gt;vsc-licenserを更新した&lt;/h2&gt;

&lt;p&gt;0.5.1 をリリースした。0.5.0を昨日リリースして、これで対応ライセンスと対応言語はかなり必要なものがそろったので、次は機能を拡充させていく段階だと思う。&lt;/p&gt;

&lt;h2 id=&#34;ローグ-ワンを観た&#34;&gt;ローグ・ワンを観た&lt;/h2&gt;

&lt;p&gt;コアなファンではないものの、スターウォーズは好きなので、三が日の空いている時期を狙って「ローグ・ワン」を観てきた。&lt;/p&gt;

&lt;p&gt;エピソード３と４の間という事前情報は知っていたけれど、どちらかというとエピソード４寄りだった。だいぶ時代設定は慎重に合わせていた印象で、エピソード４の出撃に至るまでの細かな穴埋めをしてくれた感じ。正月映画としていいものを観た。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>2017年元日</title>
      <link>https://ymotongpoo.github.io/diary/2017/01/01/new-year-day/</link>
      <pubDate>Sun, 01 Jan 2017 16:34:08 +0900</pubDate>
      
      <guid>https://ymotongpoo.github.io/diary/2017/01/01/new-year-day/</guid>
      <description>

&lt;h2 id=&#34;お年玉をもらった&#34;&gt;お年玉をもらった&lt;/h2&gt;

&lt;p&gt;「誕生日プレゼント」と言いつつお年玉をもらった。やっぱり自活していても親子の関係は変わらないものだ。&lt;/p&gt;

&lt;h2 id=&#34;msys2とchocolateyで作ったnode-js環境がぶっこわれた&#34;&gt;MSYS2とchocolateyで作ったnode.js環境がぶっこわれた&lt;/h2&gt;

&lt;p&gt;npmで &lt;code&gt;vscode&lt;/code&gt; パッケージをアップデートしたらぶっ壊れた。具体的にはVisual Studio Codeが &lt;code&gt;vscode&lt;/code&gt; パッケージを参照できなくなった。&lt;/p&gt;

&lt;h2 id=&#34;むかついたのでmsys2環境つぶした&#34;&gt;むかついたのでMSYS2環境つぶした&lt;/h2&gt;

&lt;p&gt;結局 MSYS2 の環境と Windows ネイティブの環境を同居させようという精神良くないっていう話で、MSYS2環境をぶっ潰して、PowerShell（+Cmder）の環境でどんどん行くことして、Windowsネイティブだけでやっていくことにした。具体的に入れた環境は次の通り。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/spf13/hugo/&#34;&gt;spf13/hugo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/coreybutler/nvm-windows/&#34;&gt;coreybutler/nvm-windows&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/dahlbyk/posh-git&#34;&gt;dahlbyk/posh-git&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/flofreud/posh-gvm&#34;&gt;flofreud/posh-gvm&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;なんかPowerShellは &lt;code&gt;Install-Module&lt;/code&gt; っていうコマンドがあって、PowerShellのコマンドライン上でインストール出来てすごくいい。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;&amp;gt; Install-Module posh-git -Scope CurrentUser
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;chocolateyをインストールしてるのでこれでもインストールできるけど。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;&amp;gt; choco install poshgit
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Git Credential Manger for WinをMSYS2のgitで使う</title>
      <link>https://ymotongpoo.github.io/tech/2016/12/31/use-git-credential-manager-for-win-with-msys2/</link>
      <pubDate>Sat, 31 Dec 2016 12:41:35 +0900</pubDate>
      
      <guid>https://ymotongpoo.github.io/tech/2016/12/31/use-git-credential-manager-for-win-with-msys2/</guid>
      <description>

&lt;h1 id=&#34;なぜgcm-for-winが必要か&#34;&gt;なぜGCM for Winが必要か&lt;/h1&gt;

&lt;h2 id=&#34;githubで2要素認証をしている&#34;&gt;GitHubで2要素認証をしている&lt;/h2&gt;

&lt;p&gt;2要素認証にすると、アクセストークンを発行しないと普通にHTTPSでpushができない。しかし、アクセストークンを発行しても、それを記憶していないといけない。そこでMacやLinuxのときと同様に、Git Credential Managerを利用しようと思った次第。&lt;/p&gt;

&lt;h2 id=&#34;gitはmsys2で入れていた&#34;&gt;Gitはmsys2で入れていた&lt;/h2&gt;

&lt;p&gt;いくつかの選択肢があるけれど、自分はすでにMSYS2でGitをインストールしてしまっていたので、Git Credential Managerのためだけに、再度Gitをインストーラーで入れるのは嫌だった。もしそれが問題ないなら、バイナリインストーラーを使うのが良い。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/Microsoft/Git-Credential-Manager-for-Windows/releases/latest&#34;&gt;Git Credential Manager for Windows latest build&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;そこで、上記のリンクにあったzipのものをダウンロードし、GCMだけを単体でインストールした。中に同梱されている &lt;code&gt;install.cmd&lt;/code&gt; を実行しておしまい。すると &lt;code&gt;git-credential-manager.exe&lt;/code&gt; 等々が &lt;code&gt;%USERPROFILE%\bin&lt;/code&gt; にインストールされる。これにPATHが通るようにMSYS2の &lt;code&gt;.zshenv&lt;/code&gt; に次のように追加しておいた。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shellscript&#34;&gt;PATH=$PATH:/c/Users/&amp;lt;username&amp;gt;/bin
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;git-configで利用する旨を設定する&#34;&gt;git configで利用する旨を設定する&lt;/h2&gt;

&lt;p&gt;MacやLinuxの場合と同様に &lt;code&gt;git config&lt;/code&gt; で設定しておく。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ git config --global credential.helper manager
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これで通常通り &lt;code&gt;git push&lt;/code&gt; などを行うとこういうポップアップが出るようになって2要素認証でログインできた。&lt;/p&gt;

&lt;figure&gt;
  &lt;amp-img src=&#34;https://ymotongpoo.github.io/img/2016-12-31-001.png&#34; alt=&#34;Git Credential Manger for WinをMSYS2のgitで使う img/2016-12-31-001.png&#34; width=409px height=338px layout=&gt;&lt;/amp-img&gt;
  
&lt;/figure&gt;


&lt;p&gt;一度ログインしてしまえば2回目以降は自動で認証されるのでなにも入力しなくてよい。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>誕生日</title>
      <link>https://ymotongpoo.github.io/diary/2016/12/31/birthday/</link>
      <pubDate>Sat, 31 Dec 2016 12:16:08 +0900</pubDate>
      
      <guid>https://ymotongpoo.github.io/diary/2016/12/31/birthday/</guid>
      <description>

&lt;h2 id=&#34;1年間の振り返りとか&#34;&gt;1年間の振り返りとか&lt;/h2&gt;

&lt;p&gt;毎年恒例のエントリを書いた。内容が薄い。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://ymotongpoo.hatenablog.com/entry/2016/12/31/110228&#34;&gt;YAMAGUCHI::weblogの2016年を振り返る&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;また今年は前日に買ってよかったものを一覧にして書いた。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://ymotongpoo.hatenablog.com/entry/2016/12/29/232201&#34;&gt;2016年買ってよかったもの&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>